<project 
	name="GProMJDBC" 
	default="jar" 
	basedir="."
	xmlns:ivy="antlib:org.apache.ivy.ant"
	xmlns:artifact="antlib:org.apache.maven.artifact.ant"
	xmlns:if="ant:if"
    xmlns:unless="ant:unless"
	>
	
	<description>
		GProM is a provenance middleware for databases.
	</description>
	
	<!-- do not add ant classpath to javac classpath -->
<!--	<presetdef name="javac">
		<javac includeantruntime="false" />
	</presetdef> -->
	
	<!-- Main Class and Packages-->
  	<property name="mainclass" value="org.gprom.jdbc.test.SQLiteJDBCTest" />
	<property name="jar.creator" value="Illinois Institute of Technology, Department of Computer Science, DBGroup" />
	<property name="package" value="*" />
	<property name="mvn.description" value="GProM is a provenance database middleware." />
	<property name="mvn.url" value="https://github.com/IITDBGroup/gprom" />
	
	<!-- define artifacts' name, which follows the convention of Maven -->
	<property name="artifactId" value="gprom-jdbc" />
	
	<!-- ClassPath Setup -->
	<property name="classpath.name.bin" value="classpath.bin" />
	<property name="classpath.name.build" value="classpath.build" />
	<property name="classpath.name.test" value="classpath.test" />
	
	<!-- main directories -->
	<property name="dir.source" value="${basedir}/src/interfaces/jdbc/java" />
	<property name="dir.testsource" value="${basedir}/javatest" />
	<property name="dir.build" value="${basedir}/build" />
	<property name="dir.bin" value="${dir.build}/javabin" />
	<property name="dir.library" value="${dir.build}/javalib" />
	<property name="dir.testlib" value="${dir.build}/javatestlib" />
	<property name="dir.depcache" value="${dir.build}/depcache" />
	<property name="dir.buildresource" value="${basedir}/ant" />
	
	<property name="jar.bin" value="${dir.build}/gprom-jdbc.jar" />
	<property name="jar.bin.fat" value="${dir.build}/gprom-jdbc-all.jar" />

	<!-- Import macro definitions and common stuff -->
	<import file="antutils/ant-common.xml" />
	
	<!-- special files -->
	<property name="conffile.name" value="GProMDriver.properties" />
	<property name="log4jconffile.name" value="log4j.properties" />
	
	<property name="conffile" value="${dir.buildresource}/${conffile.name}" />
	<property name="log4jconffile" value="${dir.buildresource}/${log4jconffile.name}" />
	<property name="ivyfile" value="${basedir}/ivy.xml" />
	<property name="ivyfile.test" value="${dir.buildresource}/ivy-test.xml" />
	
	<!-- GProM c-library -->
	<property name="gpromlib.darwin.src" value="${basedir}/src/libgprom/.libs/libgprom.dylib" />
	<property name="gpromlib.darwin.bin" value="${dir.bin}/darwin_x64/libgprom.dylib" />
	<property name="gpromlib.darwin" value="${dir.build}/libgprom.jnilib" />	
	
	<property name="gpromlib.linux.src" value="${basedir}/src/libgprom/.libs/libgprom.so.0" />
	<property name="gpromlib.linux.bin" value="${dir.bin}/linu_x64/libgprom.so" />
	<property name="gpromlib.linux" value="${dir.build}/libgprom.so" />   
	
	<!-- TARGETS -->	
	<!-- download dependencies with ivy -->
	<target name="download-dependencies" 
			depends="mkdirs-and-setup-props" 
			description="use ivy to download dependencies">
		
		<ivy-download-deps
			ivyfile="${ivyfile.test}"
			libsdir="${dir.testlib}"
			buildivyfile=""
			/>
		<ivy-download-deps/>
		<classpath-from-dir dir="${dir.buildlib}" 
				pathname="${classpath.name.build}" 
				pathnamejar="${classpath.name.build}.jar"/>
		<classpath-from-dir dir="${dir.library}" 
				pathname="${classpath.name.bin}" 
				pathnamejar="${classpath.name.bin}.jar"/>
		<classpath-from-dir dir="${dir.testlib}" 
				pathname="${classpath.name.test}" 
				pathnamejar="${classpath.name.test}.jar"/>
	</target>

	<target name="setup-additional-anttasks" 
			depends="download-dependencies">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties"
			classpathref="${classpath.name.build}">
		</taskdef>
	</target>
	
	<!-- check OS type -->
	<target name="handle-os" 
			depends="setup-additional-anttasks">
		<detect-os />
		<if>
	        <equals arg1="${os.type}" arg2="mac" />
	        <then>
	            <echo message="Mac system" />
		        	<property name="gpromlib.src" value="${gpromlib.darwin.src}" />
		        	<property name="gpromlib.bin" value="${gpromlib.darwin.bin}" />
		        	<property name="gpromlib" value="${gpromlib.darwin}" />
	        </then>
		</if>
		<if>
	        <equals arg1="${os.type}" arg2="unix" />
	        <then>
	            <echo message="Linux system" />
		        	<property name="gpromlib.src" value="${gpromlib.linux.src}" />
		        	<property name="gpromlib.bin" value="${gpromlib.linux.bin}" />
		        	<property name="gpromlib" value="${gpromlib.linux}" />
	        </then>
		</if>
    </target>
	
	<!-- build targets -->
	<target name="clean" 
			depends="handle-os"
			description="clean up">
		
		<copy todir="${dir.library}">
			<fileset dir="${dir.buildresource}" includes="${conffile.name},${log4jconffile.name}" /> 
		</copy>
		<depend srcdir="${dir.source}"
		        destdir="${dir.bin}"
		        cache="depcache"
		        closure="yes"/>
	</target>
	
	<target name="clean-all"
		description="clean all">
		
		<delete dir="${dir.bin}" includeemptydirs="true" />
		<delete dir="${dir.build}" includeemptydirs="true" />
	</target>

	<target name="compile" 
		depends="clean"
		description="compile JDBC Java files">
		
		<copy file="${gpromlib.src}" tofile="${gpromlib}" overwrite="true" />
		<copy todir="${dir.build}/lib">
			<fileset dir="${dir.library}" />
		</copy>
		<copy file="${gpromlib}" tofile="${gpromlib.bin}" />
	<!--	<copy file="${conffile}" tofile="${dir.bin}/GPRoMDriver.properties" /> -->
		<javac srcdir="${dir.source}" 
				destdir="${dir.bin}"  
				debug="on" 
			    fork="true" 
			    includeantruntime="false"
				verbose="true">
			<classpath refid="${classpath.name.bin}"/>
			<compilerarg value="-Xlint:unchecked" />		
		</javac>
		
		<fileset id="fat.jar.resources" 
				dir="${dir.library}" 
				includes="${conffile.name},${log4jconffile.name}">
		</fileset>
	</target>
	
	<target name="compile-tests" 
			depends="compile"
			description="compile automated GProM tests Java files">
		
		<javac srcdir="${dir.testsource}" destdir="${dir.bin}" debug="on" fork="true" includeantruntime="false" verbose="true">
			<classpath refid="${classpath.name.test}"/>
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>
	
	<!-- convenience task for compiliation without library dependency checking -->
	<target name="jar-only" depends="mkdirs-and-setup-props">
		<classpath-from-dir dir="${dir.buildlib}" 
				pathname="${classpath.name.build}" 
				pathnamejar="${classpath.name.build}.jar"/>
		<classpath-from-dir dir="${dir.library}" 
				pathname="${classpath.name.bin}" 
				pathnamejar="${classpath.name.bin}.jar"/>
		<classpath-from-dir dir="${dir.testlib}" 
				pathname="${classpath.name.test}" 
				pathnamejar="${classpath.name.test}.jar"/>
		<fileset id="fat.jar.resources" 
				dir="${dir.library}" 
				includes="${conffile.name},${log4jconffile.name}">
		</fileset>
		<javac srcdir="${dir.source}" 
				destdir="${dir.bin}"  
				debug="on" 
			    fork="true" 
			    includeantruntime="false"
				verbose="true">
			<classpath refid="${classpath.name.bin}"/>
			<compilerarg value="-Xlint:unchecked" />		
		</javac>
		<javac srcdir="${dir.testsource}" destdir="${dir.bin}" debug="on" fork="true" includeantruntime="false" verbose="true">
			<classpath refid="${classpath.name.test}"/>
			<compilerarg value="-Xlint:unchecked" />
		</javac>
		<jar destfile="${jar.bin}"  update="true">
				<manifest>
					<attribute name="Main-Class" value="${mainclass}" />
					<attribute name="Created-By" value="${jar.creator}" />
					<attribute name="Class-Path" value="${classpath.bin.jar} resource/ lib/" />
				</manifest>
				<service type="java.sql.Driver"
			           provider="org.gprom.jdbc.driver.GProMDriver"/>
				<fileset refid="fat.jar.resources" />
				<fileset dir="${dir.bin}" />
			</jar>
	</target>
	
	<!-- generate a simple jar file for the jdbc driver that does not include referrenced jars and the GProM C-library -->
	<target name="jar" 
			depends="compile,compile-tests"
			description="create Jar file">
		
		<echo message="${classpath.bin.jar}" />
		<jar destfile="${jar.bin}"  update="true">
			<manifest>
				<attribute name="Main-Class" value="${mainclass}" />
				<attribute name="Created-By" value="${jar.creator}" />
				<attribute name="Class-Path" value="${classpath.bin.jar} resource/ lib/" />
			</manifest>
			<service type="java.sql.Driver"
		           provider="org.gprom.jdbc.driver.GProMDriver"/>
			<fileset refid="fat.jar.resources" />
			<fileset dir="${dir.bin}" />
		</jar>
	</target>
	
	<!-- generate one combine "fat" jar file that contains all java libraries and native libaries (the GProM application) --> 
	<target name="jar-fat" 
			depends="compile,compile-tests,cross-compile-libgprom"
			description="generate a fat jar containing all deps">
		
		<echo message="build jar for ${os.type} using library ${gpromlib}" />
		
		<print-fileset filesetid="fat.jar.resources" />
		
		<property name="dir.tmpjar" value="${dir.build}/tmpjar" />
		<path id="jarclasspath">
			<fileset dir="${dir.library}" includes="*.jar" />
		</path>
		<delete dir="${dir.tmpjar}"/> 
		<unjar dest="${dir.tmpjar}">
			<patternset>
				<exclude name="**/*.RSA"/>
				<exclude name="**/*.SF"/>
				<exclude name="**/*.DSA"/>
			</patternset>
			<path refid="jarclasspath" />
		</unjar>
		<jar destfile="${jar.bin.fat}" zip64Mode="as-needed">
			<manifest>
				<attribute name="Main-Class" value="${mainclass}" />
				<attribute name="Created-By" value="${jar.creator}" />
				<attribute name="Class-Path" value="${classpath.bin.jar} resource/ lib/" />
			</manifest>
			<zipfileset dir="${dir.tmpjar}" includes="**/*" />
			<service type="java.sql.Driver"
		           provider="org.gprom.jdbc.driver.GProMDriver"/>
			<fileset refid="fat.jar.resources" />
			<fileset dir="${dir.bin}" />
		</jar>
		<delete dir="${dir.tmpjar}"/>
	</target>
	
	<!-- cross compile libgprom for inclusion in all-native jar -->
	<target name="cross-compile-libgprom"
			description="create architecture specific versions of libgprom using cross-compilation"
			depends="compile,compile-tests">
		<!-- get version from ivy file -->
		<ivy:info file="${ivyfile}" />

		<!-- define compress anttasks -->
		<taskdef resource="org/apache/ant/compress/antlib.xml" 
			classpathref="${classpath.name.build}"/>
		
		<property name="dir.dockercross" value="${dir.buildresource}/dockercross" />
		<property name="srctar" value="gprom-${ivy.revision}.tar" />
		<property name="srctarball" value="${srctar}.gz" />
		<property name="srctardir" value="${basedir}" />
		<property name="configure.options" value="--disable-postgres --disable-oracle --disable-sqlite --disable-monetdb --disable-readline --disable-java" />
		<property name="make.options" value="-j 4" />
		<property name="libgpromdir" value="src/libgprom/.libs" />

		<propertyregex property="gprom.major.version"
		               input="1=${ivy.revision}"
		               regexp="1=([0-9]+)[.][0-9]+[.][0-9]+"
		               select="\1"
		               casesensitive="false" />
		<echo message="gprom major version is ${gprom.major.version}" />

		<build-native-library 
			crossscript="${dir.dockercross}/dockcross-linux-x64" 
			outfolder="linux_x64" 
			libpath="${libgpromdir}/libgprom.so.${ivy.revision}"
			libname="libgprom.so"/>
		<build-native-library 
			crossscript="${dir.dockercross}/dockcross-linux-x86" 
			outfolder="linux_x32" 
			libpath="${libgpromdir}/libgprom.so.${ivy.revision}"
			libname="libgprom.so"
			addargs="--build=x86_64-pc-linux-gnu --host=x86-pc-linux-gnu" />
		<build-native-library 
			crossscript="${dir.dockercross}/dockcross-windows-x86" 
			outfolder="windows_x32" 
			libpath="${libgpromdir}/libgprom-${gprom.major.version}.dll" 
			libpath2="${libgpromdir}/libgprom.lai"
			libname="libgprom.dll"
			addargs="--build=x86_64-pc-linux-gnu --host=i686-pc-mingw32"/>
		<build-native-library 
			crossscript="${dir.dockercross}/dockcross-windows-x64" 
			outfolder="windows_x64" 
			libpath="${libgpromdir}/libgprom-${gprom.major.version}.dll" 
			libpath2="${libgpromdir}/libgprom.lai"
			libname="libgprom.dll"
			addargs="--build=x86_64-pc-linux-gnu --host=x86_64-pc-mingw64"/>
	</target>
	
	<!-- build one native library -->
	<macrodef name="build-native-library"
			description="build libgprom native library for one architecture using dockercross">
		
		<attribute name="outfolder" default="" />
		<attribute name="binarydir" default="${dir.bin}" />
		<attribute name="builddir" default="${dir.build}" />
		<attribute name="crossscript" default="" />
		<attribute name="untardir" default="gprom-${ivy.revision}" />
		<attribute name="srctarball" default="${srctarball}" />
		<attribute name="srctar" default="${srctar}" />
		<attribute name="tardir" default="${srctardir}" />
		<attribute name="libpath" default="" />
		<attribute name="libpath2" default="" />
		<attribute name="libname" default="" />
		<attribute name="addargs" default="" />
		
		<sequential>
			<local name="tarpath" /> 
			<local name="targzpath" />
			<local name="dir.cross.build" />
			<local name="dir.cross.dest" />
			<local name="crossscript.name" />
			<local name="expanddir" />	
			<local name="library.exists" />
			<local name="expanddir.exists" />
			<local name="have.libpath2" />
			
			<!-- check for parameters and check that srctarball exists -->
			<fail-if-empty arg="@{libname}" />
			<fail-if-empty arg="@{outfolder}" />
			<fail-if-empty arg="@{builddir}" />
			<fail-if-empty arg="@{crossscript}" />
			<fail-if-empty arg="@{srctarball}" />
			<fail-if-empty arg="@{srctar}" />
			<fail-if-empty arg="@{tardir}" />
			<fail-if-empty arg="@{libname}" />
			
			<fail-if-bin-not-exists bin="docker" 
				message="Need docker to cross-compile libgprom" />
					
			<property name="targzpath" value="@{tardir}/@{srctarball}" />
			<property name="tarpath" value="@{tardir}/@{srctar}" />
			
			<fail-not-exists arg="@{crossscript}" type="file"/>
			<fail-not-exists arg="${targzpath}" type="file"/>
			
			<basename property="crossscript.name" file="@{crossscript}"/>
			
			<echo message="**********************************************************"/>
			<echo message="*  BUILD @{outfolder} NATIVE LIBRARY USING @{crossscript} "/>
			<echo message="**********************************************************"/>

			<property name="dir.cross.build" value="@{builddir}/@{outfolder}" />
			<property name="dir.cross.dest" value="@{binarydir}/@{outfolder}" />
			
			<mkdir dir="${dir.cross.build}" />
			<mkdir dir="${dir.cross.dest}" />
			
			<!-- uncompress tarball and copy dockercross script -->
			<property name="expanddir" value="${dir.cross.build}/@{untardir}" />
			<condition property="expanddir.exists">
				<available file="${expanddir}" type="dir"/>
			</condition>
			
			<sequential unless:set="expanddir.exists">
				<gunzip src="${targzpath}" />
				<untar src="${tarpath}" dest="${dir.cross.build}"/>
				<copy file="@{crossscript}" todir="${expanddir}" />
				
				<!-- repair permissions -->
				<chmod perm="755" file="${expanddir}/${crossscript.name}" />
				
				<chmod perm="755">
					<fileset dir="${expanddir}" includes="configure" />
				</chmod>
			</sequential>
			

			<!-- run compilation -->
			<condition property="library.exists">
				<available file="${expanddir}/@{libpath}" type="file"/>
			</condition>
		
			<sequential unless:set="library.exists">
				<exec executable="${expanddir}/${crossscript.name}" 
					dir="${expanddir}">
					<arg value="--" />
					<arg value="./configure" />
					<arg value="--disable-postgres" />
					<arg value="--disable-oracle" />
					<arg value="--disable-sqlite" />
					<arg value="--disable-monetdb" />
					<arg value="--disable-readline" />
					<arg value="--disable-java" />
					<arg line="@{addargs}" />
				</exec>
				
				<exec executable="${expanddir}/${crossscript.name}"
					dir="${expanddir}">
					<arg value="make" />
					<arg value="-j" />
					<arg value="8" />
				</exec>
			</sequential>
			<!-- copy to destination -->
			<copy file="${expanddir}/@{libpath}" tofile="${dir.cross.dest}/@{libname}" />
			
			<set-prop-if-not-empty arg="@{libpath2}" propname="have.libpath2" />
			<sequential if:set="have.libpath2">
				<copy file="${expanddir}/@{libpath2}" todir="${dir.cross.dest}" />
			</sequential>
			
		</sequential>
	</macrodef>
	
</project>