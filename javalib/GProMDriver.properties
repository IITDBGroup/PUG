#
# Mapping for the connect method for knowing which Class should be 
# loaded. Maps the identifications string from the URL to the driver
# class. If an URL is not available then we assume that the user of our
# library is responsible for loading the driver
#
driverClass.SQLServer = com.microsoft.sqlserver.jdbc.SQLServerDriver
driverClass.MySQL = org.gjt.mm.mysql.Driver
driverClass.Oracle = oracle.jdbc.driver.OracleDriver
driverClass.Postgres = org.postgresql.Driver
driverClass.HSQL = org.hsqldb.jdbcDriver

# Backend name to URL prefix mapping
urlPrefix.oracle = Oracle
urlPrefix.postgresql = Postgres 
urlPrefix.hsqldb = HSQL

# GProM configuration settings per backend
# Oracle
gpromOptions.Oracle.plugin.metadata = oracle
gpromOptions.Oracle.plugin.parser = oracle
gpromOptions.Oracle.plugin.sqlcodegen = oracle
gpromOptions.Oracle.plugin.analyzer = oracle
gpromOptions.Oracle.plugin.translator = oracle
gpromOptions.Oracle.plugin.sqlserializer = oracle
gpromOptions.Oracle.plugin.executor = sql
gpromOptions.Oracle.log.active = true

# Postgres (only metadatalookup supported yet)
gpromOptions.Postgres.plugin.metadata = postgres
gpromOptions.Postgres.plugin.parser = oracle
gpromOptions.Postgres.plugin.sqlcodegen = oracle
gpromOptions.Postgres.plugin.analyzer = oracle 
gpromOptions.Postgres.plugin.translator = oracle
gpromOptions.Postgres.plugin.sqlserializer = oracle
gpromOptions.Postgres.plugin.executor = sql
gpromOptions.Postgres.log.active = true
